{
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Get the binary data as a Buffer\nconst binaryData = await this.helpers.getBinaryDataBuffer(0, 'data');\n\n// Convert buffer to base64\nconst base64String = binaryData.toString('base64');\n\n// Return as JSON\nreturn [\n  {\n    json: {\n      file: {\n        data: base64String,\n        mimeType: 'video/webm',\n        fileName: 'file.webm'\n      }\n    }\n  }\n];\n"
      },
      "id": "e321d747-3560-45f2-a428-600359cf29cf",
      "name": "Convert to Base64 JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        480
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "audio-echo",
        "responseMode": "responseNode",
        "options": {
          "binaryData": false
        }
      },
      "id": "940cb117-cfe5-4831-a820-75d12e05a109",
      "name": "input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        480,
        332
      ],
      "webhookId": "audio-echo"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "body.file.base64",
        "options": {
          "fileName": "file.webm",
          "mimeType": "video/webm"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        992,
        480
      ],
      "id": "b6c4365b-635b-4842-8312-9542fa3a3c15",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "3208821c-fe73-4ea1-8c52-3b6396d07db9",
      "name": "Respond With JSON1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1504,
        480
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a505c57-7dd1-48bd-8011-3fc9a6578e68",
              "leftValue": "={{ $json.body }}",
              "rightValue": "=translate",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        704,
        336
      ],
      "id": "240975bb-0624-4ebd-b928-2d86408ecd9a",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=System Prompt for n8n AI Agent\nYou are an AI-Based Language Assistant.\n\nYour Tasks:\nTranslate\nGrammar Correction\nSummarize\nExplain\nRephrase\n\nOutput Rules:\nAlways perform the action exactly as requested.\nRespond in the requested tone/style: Neutral, Formal, Casual, Professional, or Friendly.\nUse the input language when specified.\nDeliver the result in the target language chosen by the user.\nReturn output only in JSON format with one field: \"result\".\nDo not include explanations, notes, or formatting outside JSON.\n\nVariables from n8n:\nAction: {{ $json.body.action }}\nTone/Style: {{ $json.body.tone }}\nInput Language: {{ $json.body.inputLang }}\nTarget Language: {{ $json.body.targetLang }}\nText to Process: {{ $json.body.text }}\n\nExpected Output Format:\n\n{\n  \"result\": \"processed text here\"\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        928,
        80
      ],
      "id": "74a0b124-a183-462e-9e7c-f4caac4333ce",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        928,
        304
      ],
      "id": "851a62da-5952-4f1a-8fd2-558b315f3929",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "SIjVwGvuvvREOF5g",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"result\": \"processed text here\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1104,
        288
      ],
      "id": "d9fd0312-556c-4296-8704-2cd9a639659c",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output.result }}",
        "options": {}
      },
      "id": "90c506b4-2c41-4585-9094-828edaa6a373",
      "name": "Respond With JSON",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1408,
        80
      ]
    }
  ],
  "connections": {
    "Convert to Base64 JSON": {
      "main": [
        [
          {
            "node": "Respond With JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "input": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Convert to Base64 JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond With JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2e2d2e399b8b4ed817f402d5e1055838fad188858d57813e4f68ac4ce0a10810"
  }
}